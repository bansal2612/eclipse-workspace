package com.birlasoft.automation.tests.regression;

import java.io.File;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Test;

import com.birlasoft.automation.driver.TestConfig;
import com.birlasoft.automation.driver.TestData;
import com.birlasoft.automation.driver.TestDriver;
import com.birlasoft.automation.uipages.AdminPage;
import com.birlasoft.automation.uipages.HomePage;
import com.birlasoft.automation.uipages.LoginPage;
import com.birlasoft.automation.uipages.SirvaPage;
import com.birlasoft.framework.ExtentManager;
import com.birlasoft.framework.LogMe;
import com.birlasoft.utils.UIUtils;
import com.relevantcodes.extentreports.LogStatus;

public class TestAdmin extends BaseTest {
	static LogMe LOGGER;
	private WebDriver driver;
	LoginPage login;
	HomePage home;
	WebDriverWait wait;
	Random rand;
	String downloadPath = System.getProperty("user.home") + File.separator + "Downloads";
	public final String reportPath=new File("Framework\\Test_Data\\RPT_EXPORT_3M_Assignee_Detail.xml").getAbsolutePath();

	@BeforeSuite(alwaysRun = true)
	public void suiteSetup() {

		try {
			LOGGER = new LogMe(TestsClient.class);
			TestConfig.getInstance().suiteSetup();
		} catch (Exception e) {
			LOGGER.logError("Exception " + e.getClass().getName() + " caught from suite setup method", e);
		}

	}

	@BeforeMethod(alwaysRun = true)
	public void startReporting(Method method) throws Exception {
		driver = TestDriver.driverInstantiation(TestConfig.getInstance().getBrowserName().toUpperCase());
		LogMe.getLogger().info("Base URL is " + TestConfig.getInstance().getAppBaseURL());
		LOGGER.logInfo("*********EXECUTION STARTED**********\n\n");
		driver.get(TestConfig.getInstance().getAppBaseURL());
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		driver.manage().timeouts().pageLoadTimeout(120, TimeUnit.SECONDS);
		driver.manage().timeouts().setScriptTimeout(120, TimeUnit.SECONDS);
		UIUtils.waitForPageLoad(driver);
		if (!TestConfig.getInstance().getDeviceResolution().equals("Full Screen")) {
			String[] dim = TestConfig.getInstance().getDeviceResolution().split(",");
			int dimX = Integer.parseInt(dim[0]);
			int dimY = Integer.parseInt(dim[1]);
			Dimension d = new Dimension(dimX, dimY);
			driver.manage().window().setSize(d);
		} else {
			driver.manage().window().maximize();
		}

		// Login into the application
		login = PageFactory.initElements(driver, LoginPage.class);
		// Validation whether login is displaying or not
		Assert.assertTrue(login.isPageOpen());
		// Trying to login into the application
		home = login.login(TestConfig.getDataConfig().getPropertyValue("userName"),
				TestConfig.getDataConfig().getPropertyValue("secret"));
		wait = new WebDriverWait(driver, Integer.parseInt(TestConfig.getConfig().getPropertyValue("AVGWAITTIME")));
		rand = new Random();
		LOGGER.logBeginTestCase(method.getName());
		Assert.assertTrue(home.isPageOpen());
		LOGGER.logTestStep("PASS", "Home page is displaying");
	}

	@Test(description = "Open/Update existing role", enabled = false, priority = 1, groups = { "Regression", "Admin" })
	public void TC_01_Open_Update_Existing_Role() throws Exception {
		AdminPage adminPage = home.clickAdmin();
		// Validation for Admin page is displayed
		try {
			Assert.assertTrue(adminPage.isPageOpen());
			LOGGER.logTestStep("PASS", "Administration Menu displayed");
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("AdminRole", "Roles"));
			Thread.sleep(8000);
			driver.switchTo().defaultContent();
			adminPage.getWork_bottom_updated();
			wait.until(ExpectedConditions.presenceOfElementLocated(
					TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "Rolename")));
			// Validation for Role search page opened.
			Assert.assertTrue(UIUtils.isObjectExist(driver,
					TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "Rolename")));
			LOGGER.logTestStep("PASS", "Role Search displayed");
			UIUtils.inputText(
					UIUtils.findElement(driver,
							TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "Rolename")),
					TestData.getData("Role").get("Rolename").toString());
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "Search"));
			driver.switchTo().parentFrame();
			driver.switchTo().frame(
					wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//frame[@name='work_top']"))));
			wait.until(ExpectedConditions.visibilityOf(UIUtils.findElement(driver,
					TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "anchorLink"))));
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "anchorLink"));
			LOGGER.logTestStep("PASS", "Clicked on Search result");
			UIUtils.waitUntilElementExists(driver,
					TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "anchorLink"), 60);
			driver.switchTo().defaultContent();
			//LoaderLogic
			if(adminPage.waitForLoader())
			    LOGGER.logTestStep("PASS", "Loader Appears waiting for it to disappear");
			else
			    Thread.sleep(5000);
			//LoaderLogicEnd
			adminPage.getWork_top_Admin();
			wait.until(ExpectedConditions.visibilityOf(UIUtils.findElement(driver,
					TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "RoleSecurity"))));
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "RoleSecurity"));
			Thread.sleep(10000);
			driver.switchTo().defaultContent();
			wait.until(ExpectedConditions.visibilityOf(UIUtils.findElement(driver,
					By.xpath("//div[@id='styled_popup_1']/div[@class='dmode_iframe_container']/iframe"))));
			driver.switchTo().frame(UIUtils.findElement(driver,
					By.xpath("//div[@id='styled_popup_1']/div[@class='dmode_iframe_container']/iframe")));
			wait.until(ExpectedConditions.visibilityOf(UIUtils.findElement(driver, By.xpath("//frame[@name='work']"))));
			wait.until(ExpectedConditions
					.frameToBeAvailableAndSwitchToIt(UIUtils.findElement(driver, By.xpath("//frame[@name='work']"))));
			int i = 1;
			while (i < 3000) {
				if (UIUtils.isElementPresent(driver,
						TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "ProgramTypes"))) {
					break;
				} else
					i = i + 1;
			}
			wait.until(ExpectedConditions.visibilityOf(UIUtils.findElement(driver,
					TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "ProgramTypes"))));
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "ProgramTypes"));
			UIUtils.clickAllCheckbox(driver.findElements(
					TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "ProgramTypesCheckbox")));
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "ProgramTypes"));
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "Analytics"));
			UIUtils.clickAllCheckbox(driver
					.findElements(TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "AnalyticsCheckbox")));
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "Analytics"));
			UIUtils.clickElement(driver,
					TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "ReportCategories"));
			Thread.sleep(1000);
			UIUtils.clickElement(driver,
					TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "ReportCategories"));
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "Services"));
			UIUtils.clickAllCheckbox(
					driver.findElements(TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "ServicesAll")));
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "Services"));
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "Assignee"));
			wait.until(ExpectedConditions.visibilityOf(UIUtils.findElement(driver,
					TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "payablesWorksheet"))));
			UIUtils.scrollIntoView(driver,
					TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "payablesWorksheet"));
			Thread.sleep(2000);
			UIUtils.clickElement(driver,
					TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "payablesWorksheet"));
			Thread.sleep(2000);
			driver.switchTo().defaultContent();
			wait.until(ExpectedConditions.visibilityOf(UIUtils.findElement(driver,
					By.xpath("//div[@id='styled_popup_2']/div[@class='dmode_iframe_container']/iframe"))));
			driver.switchTo().frame(UIUtils.findElement(driver,
					By.xpath("//div[@id='styled_popup_2']/div[@class='dmode_iframe_container']/iframe")));
			Thread.sleep(2000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "Okbutton"));
			Thread.sleep(2000);
			driver.switchTo().defaultContent();
			wait.until(ExpectedConditions.visibilityOf(UIUtils.findElement(driver,
					By.xpath("//div[@id='styled_popup_1']/div[@class='dmode_iframe_container']/iframe"))));
			driver.switchTo().frame(UIUtils.findElement(driver,
					By.xpath("//div[@id='styled_popup_1']/div[@class='dmode_iframe_container']/iframe")));
			wait.until(ExpectedConditions
					.visibilityOf(UIUtils.findElement(driver, By.xpath("//frame[@name='title_buttons']"))));
			wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(
					UIUtils.findElement(driver, By.xpath("//frame[@name='title_buttons']"))));
			Thread.sleep(2000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("DeleteService", "Okbutton"));
			Thread.sleep(5000);
			driver.switchTo().defaultContent();
			wait.until(ExpectedConditions.invisibilityOf(UIUtils.findElement(driver,
					By.xpath("//div[@id='styled_popup_2']/div[@class='dmode_iframe_container']/iframe"))));
			Thread.sleep(2000);
			adminPage.getMyBarFrame_Admin();
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Client", "save"));
			LOGGER.logTestStep("PASS", "Open/Update existing role is Executed Successfully");

		} catch (Exception e) {
			// TODO: handle exception
			LOGGER.logError("Fail: " + e.getMessage());
			org.testng.Assert.fail("Fail: " + e.getMessage());
		}
	}

	@Test(description = "Service_Workflow_Review", enabled = false, priority = 2, groups = { "Regression", "Admin" })
	public void TC_02_Service_Workflow_Review() throws Exception {
		AdminPage adminPage = home.clickAdmin();
		// Validation for Client page is displayed
		try {
			Assert.assertTrue(adminPage.isPageOpen());
			LOGGER.logTestStep("PASS", "Administration Menu displayed");
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("AdminRole", "Find"));
			LOGGER.logTestStep("PASS", "Workflows displayed");
			driver.switchTo().defaultContent();
			adminPage.getWork_updated();
			Thread.sleep(5000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Find", "LanguageTraining"));
			// Validation for Workflow Mechanic displayed
			LOGGER.logTestStep("PASS", "Workflow Mechanic displayed");
			Thread.sleep(10000);
			driver.switchTo().defaultContent();
			adminPage.getMechHeader();
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@value='Print']")));
			driver.switchTo().parentFrame();
			wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mech_navigate"));
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Workflow", "Components"));
			Thread.sleep(15000);
			driver.switchTo().defaultContent();
			adminPage.getMechHeader_dmode_frame_2();
			wait.until(ExpectedConditions.visibilityOf(UIUtils.findElement(driver,
					TestConfig.getInstance().getObjRep().getLocator("Workflow", "ServiceMechanic"))));
			LOGGER.logTestStep("PASS", "Service Mechanic displayed");
			Thread.sleep(2000);
			wait.until(ExpectedConditions
					.elementToBeClickable(TestConfig.getInstance().getObjRep().getLocator("Workflow", "Print")));
			driver.switchTo().parentFrame();
			wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mech_navigate"));
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Workflow", "Participating"));
			wait.until(ExpectedConditions
					.elementToBeClickable(TestConfig.getInstance().getObjRep().getLocator("Workflow", "ServiceName")));
			driver.switchTo().parentFrame();
			wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mech_header"));
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Testpolicy", "Close"));
			LOGGER.logTestStep("PASS", "Back to Workflow Mechanic");
			Thread.sleep(2000);
			driver.switchTo().defaultContent();
			adminPage.mech_navigate();
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Workflow", "Actions"));
			wait.until(ExpectedConditions
					.elementToBeClickable(TestConfig.getInstance().getObjRep().getLocator("Testpolicy", "Setup")));
			Thread.sleep(20000);
			driver.switchTo().parentFrame();
			wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("mech_work"));
			wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("action_work"));
			Thread.sleep(3000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Workflow", "NewInititation"));
			LOGGER.logTestStep("PASS", "Action displayed with the setup: Subject, Sequence, To Role");
			Thread.sleep(8000);
			driver.switchTo().defaultContent();
			wait.until(ExpectedConditions.visibilityOf(UIUtils.findElement(driver,
					By.xpath("//div[@id='styled_popup_2']/div[@class='dmode_iframe_container']/iframe"))));
			adminPage.frame_hdr();
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewInit", "Okbutton"));
			driver.switchTo().defaultContent();
			Thread.sleep(4000);
			adminPage.action_work();
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Workflow", "UpdateReq"));
			Thread.sleep(4000);
			driver.switchTo().defaultContent();
			adminPage.frame_hdr();
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewInit", "Okbutton"));
			Thread.sleep(2000);
			adminPage.getMechHeader();
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Testpolicy", "Close"));
			LOGGER.logTestStep("PASS", "Service_Workflow_Review Test Case Passed");

		} catch (Exception e) {
			LOGGER.logError("Fail: " + e.getMessage());
			org.testng.Assert.fail("Fail: " + e.getMessage());
		}
	}

	@Test(description = "Viewing Logs", enabled = false, priority = 3, groups = { "Regression", "Admin" }, alwaysRun=false)
	public void TC_03_Viewing_Logs() throws Exception {
		AdminPage adminPage = home.clickAdmin();
		// Validation for Client page is displayed
		try {
			Assert.assertTrue(adminPage.isPageOpen());
			LOGGER.logTestStep("PASS", "Administration Menu displayed");
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("AdminRole", "UpdateServer"));
			wait.until(ExpectedConditions.alertIsPresent());
			UIUtils.alertAccept(driver);
			Thread.sleep(35000);
			LOGGER.logTestStep("PASS", "Warning: All servers will post log files within 30seconds");
			driver.switchTo().defaultContent();
			adminPage.get_cpTop();
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Common", "AdminRole"));
			wait.until(ExpectedConditions.attributeContains(
					UIUtils.findElement(driver, TestConfig.getInstance().getObjRep().getLocator("Admin", "MenuAdmin")),
					"class", "cpmenu_selected"));
			Thread.sleep(4000);
			driver.switchTo().defaultContent();
			wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(UIUtils.findElement(driver,
					TestConfig.getInstance().getObjRep().getLocator("Newclient", "Addprogram"))));
			wait.until(ExpectedConditions
					.visibilityOf(UIUtils.findElement(driver, By.xpath("//div[@id='did_task_gadget_content']"))));
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("AdminRole", "ViewLogFiles"));
			LOGGER.logTestStep("PASS", "View Log files button clicked");
			Thread.sleep(30000);
			driver.switchTo().defaultContent();
			adminPage.getFrameDetail();
			String date = UIUtils.getCurrentDate("MM/dd/yyyy");
			String elementValue = UIUtils
					.findElement(driver, TestConfig.getInstance().getObjRep().getLocator("Admin", "LogDate")).getText()
					.trim();
			String[] dateArray = date.split("/");
			String[] elementValueArray = elementValue.split("/");
			boolean flag = false;
			for (int i = 0; i < 3; i++) {
				if (dateArray[i].contains(elementValueArray[i]))
					flag = true;

			}
			if (flag) {
				LOGGER.logTestStep("PASS", "Logs updated");
			} else
				LOGGER.logTestStep("FAIL", "Logs Not updated", adminPage.takesScreenshot());
			driver.switchTo().defaultContent();
			UIUtils.clickElement(driver, By.xpath("//span[@id='did_modbox_title_1']/following-sibling::a[text()='X']"));

		} catch (Exception e) {
			LOGGER.logError("Fail: " + e.getMessage());
			org.testng.Assert.fail("Fail: " + e.getMessage());
		}
	}

	@Test(description = "Inactivate User", enabled = false, priority = 4, groups = { "Regression", "Admin" })
	public void TC_04_Inactivate_User() throws Exception {
		SirvaPage sirvaPage = home.clickSirva();
		try {
			Assert.assertTrue(sirvaPage.isPageOpen());
			LOGGER.logTestStep("PASS", "Sirva Page is displayed");
			driver.switchTo().defaultContent();
			sirvaPage.getWorkTop_updated();
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Sirva", "Contacts"));
			driver.switchTo().defaultContent();
			//LoaderLogic
			if(sirvaPage.waitForLoader())
			    LOGGER.logTestStep("PASS", "Loader Appears waiting for it to disappear");
			else
			    Thread.sleep(5000);
			//LoaderLogicEnd
			sirvaPage.getWorkTop_updated();
			wait.until(ExpectedConditions.visibilityOf(
					UIUtils.findElement(driver, TestConfig.getInstance().getObjRep().getLocator("Sirva", "Contacts"))));
			UIUtils.inputText(
					UIUtils.findElement(driver, TestConfig.getInstance().getObjRep().getLocator("Sirva", "Lastname")),
					"Anderson");
			UIUtils.selectValue(driver, TestConfig.getInstance().getObjRep().getLocator("Sirva", "Status"), "text",
					"Inactive");
			driver.switchTo().defaultContent();
			sirvaPage.get_SearchFrame();
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Assignee", "btnSearch"));
			Thread.sleep(5 * 1000);
			driver.switchTo().defaultContent();
			sirvaPage.get_WorkBottomUpdated();
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Sirva", "anchorLink"));
			Thread.sleep(5 * 1000);
			driver.switchTo().defaultContent();
			sirvaPage.get_cpTop();
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Common", "btnLogout"));
			Thread.sleep(5 * 1000);
			driver.switchTo().defaultContent();
			wait.until(ExpectedConditions.visibilityOf(UIUtils.findElement(driver,
					TestConfig.getInstance().getObjRep().getLocator("Login", "txtUserId"))));
			UIUtils.inputText(driver, TestConfig.getInstance().getObjRep().getLocator("Login", "txtUserId"),
					"landerson");
			UIUtils.inputText(driver, TestConfig.getInstance().getObjRep().getLocator("Login", "txtPassword"),
					"LeslieLynn1");
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Login", "btnLogin"));
			wait.until(ExpectedConditions.urlContains("lockout=inactive"));
			Assert.assertTrue(UIUtils
					.findElement(driver, TestConfig.getInstance().getObjRep().getLocator("Admin", "InactiveLogin"))
					.isDisplayed());
			LOGGER.logTestStep("PASS", "Inactive user is working fine");

		} catch (Exception e) {
			// TODO: handle exception
			LOGGER.logError("Fail: " + e.getMessage());
			org.testng.Assert.fail("Fail: " + e.getMessage());
		}

	}

	@Test(description = "Add_New_Role", enabled = false, priority = 5, groups = { "Regression", "Admin" })
	public void TC_05_AddNewRole() throws Exception {
		boolean flag=true;
		AdminPage adminPage = home.clickAdmin();
		try {
			String roleName="Test Role" + rand.nextInt(1000);
			Assert.assertTrue(adminPage.isPageOpen(),"Admin Page is Opened Assertion Failed");
			LOGGER.logTestStep("PASS", "Administration Menu displayed");
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("AdminRole", "Roles"));
			Thread.sleep(15000);
			driver.switchTo().defaultContent();
			adminPage.getWork_bottom_updated();
			UIUtils.dynamicWait(driver, TestConfig.getInstance().getObjRep().getLocator("AdminTest", "AddNewRole"), 60);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("AdminTest", "AddNewRole"));
			driver.switchTo().defaultContent();
			if(adminPage.waitForLoader())
		    LOGGER.logTestStep("PASS", "Add New Role clicked");
			else
		    Thread.sleep(10000);
			WebElement did_appframe_Element=driver.findElement(By.id("did_appframe"));
			driver.switchTo().frame(did_appframe_Element);
			WebElement work_Element=driver.findElement(By.name("work"));
			driver.switchTo().frame(work_Element);
			WebElement work_top_Element=driver.findElement(By.name("work_top"));
			driver.switchTo().frame(work_top_Element);
			while(adminPage.waitForElement(driver.findElement(TestConfig.getInstance().getObjRep().getLocator("NewRole", "Inputtext")))!=true)
			{
				driver.switchTo().defaultContent();
				adminPage.getWork_top_Admin();
			}
			UIUtils.inputText(UIUtils.findElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "Inputtext")), roleName);
            Thread.sleep(1000);
            UIUtils.selectValue(driver,TestConfig.getInstance().getObjRep().getLocator("NewRole", "Select1"), "Assignee");
            Thread.sleep(1000);
            UIUtils.selectValue(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "Select2"), "Client");
            Thread.sleep(1000);
            UIUtils.selectValue(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "Select3"), "Finance");
            Thread.sleep(1000);
            driver.switchTo().parentFrame();
            Thread.sleep(2000);
            driver.switchTo().parentFrame();
            WebElement myBar=driver.findElement(By.name("myBar"));
			driver.switchTo().frame(myBar);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Client", "save"));
			driver.switchTo().defaultContent();
			int i=0;
			while(i<20000)
			{
			if(driver.findElement(TestConfig.getInstance().getObjRep().getLocator("Common", "Loader")).isDisplayed())
			{
				i=i+1;
				
			}
			else
			{
				break;
			}
			}
			
			LOGGER.logTestStep("PASS", "Loading completed");
			UIUtils.waitForPageLoad(driver);
			Thread.sleep(5000);
			adminPage.getWork_top_Admin();
            LOGGER.logTestStep("PASS", "Details Saved About to click Rolesecurity button",adminPage.takesScreenshot());
            UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "RoleSecurity"));
            driver.switchTo().defaultContent();         
            Thread.sleep(10000);
            driver.switchTo().frame(UIUtils.findElement(driver, By.xpath("//div[@id='styled_popup_1']//iframe[@id='did_dmode_frame_1']")));
            driver.switchTo().frame(UIUtils.findElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "UpperFrame")));
            i=0;
			while(i<20000)
			{
			if(UIUtils.findElement(driver, TestConfig.getInstance().getObjRep().getLocator("DeleteService", "Okbutton")).isDisplayed())
			{
				
				break;
			}
			else
			{
				driver.switchTo().parentFrame();
				driver.switchTo().frame(UIUtils.findElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "UpperFrame")));
				i=i+1;
			}
			}
            LOGGER.logTestStep("PASS", "Role Security Pop Up Opened Successfully");
            Thread.sleep(2000);
            driver.switchTo().parentFrame();
			driver.switchTo().frame(UIUtils.findElement(driver, By.xpath("//frame[@name='work']")));
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "ProgramTypesPlus"));
			Thread.sleep(2000);
			List<WebElement> allCheckBox=driver.findElements(TestConfig.getInstance().getObjRep().getLocator("NewRole", "ProgramTypeInput"));
			for (WebElement webElement : allCheckBox) {
				if(webElement.isSelected()==true)
				{
					flag=false;
					break;
				}
				
			}
			if(flag==true)
			{
				UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "ProgramTypeInput"));
			}
			Thread.sleep(2000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "ProgramTypesPlus"));
			Thread.sleep(2000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "ReportCategoriesPlus"));
			Thread.sleep(2000);
			UIUtils.clickElement(driver,  TestConfig.getInstance().getObjRep().getLocator("NewRole", "ClientSpecificPlus"));
			Thread.sleep(1000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "FinanceExpensePlus"));
			Thread.sleep(1000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "OperationalPlus"));
			Thread.sleep(1000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "ReportCategoriesPlus"));
			Thread.sleep(2000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "ServicesPlus"));
			Thread.sleep(1000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "CrossCulturalPlus"));
			Thread.sleep(2000);
			UIUtils.clickElement(driver,TestConfig.getInstance().getObjRep().getLocator("NewRole", "ServicesPlus"));
			Thread.sleep(2000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "NewAssigneePlus"));
			Thread.sleep(2000);
			UIUtils.selectValue(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "AssigneeModify"), "Modify");
			Thread.sleep(2000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Rolesearch", "payablesWorksheet"));
			Thread.sleep(2000);
			driver.switchTo().defaultContent();
			i=0;
			while(i<10000)
			{
			if(UIUtils.findElement(driver, By.xpath("//div[@id='styled_popup_2']//iframe[@id='did_dmode_frame_2']")).isDisplayed())
			{
				driver.switchTo().frame(driver.findElement(By.xpath("//div[@id='styled_popup_2']//iframe[@id='did_dmode_frame_2']")));
				break;
			}
			else
			{
			i=i+1;	
			}
			}
			driver.switchTo().defaultContent();
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "ClosePopup"));
			Thread.sleep(2000);
			driver.switchTo().frame(UIUtils.findElement(driver, By.xpath("//div[@id='styled_popup_1']//iframe[@id='did_dmode_frame_1']")));
			driver.switchTo().frame(UIUtils.findElement(driver, By.xpath("//frame[@name='work']")));
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "NewAssigneePlus"));
			Thread.sleep(2000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "ClientPlus"));
			Thread.sleep(2000);
			UIUtils.selectValue(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "ClientModify"), "Modify");
			Thread.sleep(2000);
			LOGGER.logTestStep("PASS", "All dropdown selected in Client as Modify", adminPage.takesScreenshot());
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "ClientPlus"));
			Thread.sleep(2000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "FinancePlus"));
			Thread.sleep(2000);
			UIUtils.selectValue(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "BillingLedger"), "View Only");
			Thread.sleep(2000);
			LOGGER.logTestStep("PASS", "Finance Drop down selected", adminPage.takesScreenshot());
			driver.switchTo().parentFrame();
			driver.switchTo().frame(UIUtils.findElement(driver, TestConfig.getInstance().getObjRep().getLocator("NewRole", "UpperFrame")));
			UIUtils.clickElement(driver,  TestConfig.getInstance().getObjRep().getLocator("DeleteService", "Okbutton"));
			driver.switchTo().defaultContent();
			Thread.sleep(1000);
			wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.xpath("//div[@id='styled_popup_2']//iframe[@id='did_dmode_frame_2']"))));
			Thread.sleep(6000);
			driver.switchTo().defaultContent();
			did_appframe_Element=driver.findElement(By.id("did_appframe"));
			driver.switchTo().frame(did_appframe_Element);
			myBar=driver.findElement(By.name("myBar"));
			driver.switchTo().frame(myBar);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Client", "save"));
			LOGGER.logTestStep("PASS", "Newly Created Role is saved successfully");
			
		} catch (Exception e) {
			// TODO: handle exception
			LOGGER.logError("Fail: " + e.getMessage());
			org.testng.Assert.fail("Fail: " + e.getMessage());
			
		}
		
	}

	
	@Test(description = "ExportDynamicReport", enabled = false, priority = 6, groups = { "Regression", "Admin" })
	public void TC_06_ExportDynamicReport() throws Exception {
		
		AdminPage adminPage = home.clickAdmin();
		try {
			Assert.assertTrue(adminPage.isPageOpen(),"Admin Page is Opened Assertion Failed");
			LOGGER.logTestStep("PASS", "Administration Menu displayed");
			UIUtils.waitUntilElementExists(driver,TestConfig.getInstance().getObjRep().getLocator("TestAdmin", "ExportDynamic"), 10);
			UIUtils.clickElement(driver, By.xpath("//td[text()='Export Dynamic']"));
			LOGGER.logTestStep("PASS", "Export Dynamic Button Clicked");
			driver.switchTo().defaultContent();
			int i=0;
			while(i<20000)
			{
			if(driver.findElement(TestConfig.getInstance().getObjRep().getLocator("Common", "Loader")).isDisplayed())
			{
				i=i+1;
				
				
			}
			else
			{
				break;
			}
			}
			adminPage.getWork_updated();
			LOGGER.logTestStep("PASS", "Export Dynamic Screen opened Clicked",adminPage.takesScreenshot());
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("ExportDynamic", "ClientSpecific"));
			Thread.sleep(1000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("ExportDynamic", "MAsigneeDetail"));
			Thread.sleep(5000);
			LOGGER.logTestStep("PASS", "3M Assignee Detail Report has been Clicked successfully",adminPage.takesScreenshot());
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("ExportDynamic", "ClientSpecific"));
			Thread.sleep(1000);
			List<WebElement> allElements=driver.findElements(TestConfig.getInstance().getObjRep().getLocator("ExportDynamic", "Nopad"));
			for(i=0;i<=allElements.size();i++)
			{
				UIUtils.enterTab(driver);
				Thread.sleep(500);
			}
		   UIUtils.clickEnterOnly();
		   Thread.sleep(5000);
		   UIUtils.verifyDownloadedFile(downloadPath, "RPT_EXPORT_3M_Assignee_Detail");
		   LOGGER.logTestStep("PASS", "Export Dynamic Report has been downloaded succesfully");
		   
 			
			
			
			
		} catch (Exception e) {
			// TODO: handle exception
			LOGGER.logError("Fail: " + e.getMessage());
			org.testng.Assert.fail("Fail: " + e.getMessage());
		}

	}
	
	@Test(description = "Import Dynamic Report", enabled = true, priority = 7, groups = { "Regression", "Admin" })
	public void TC_07_ImportDynamicReport() throws Exception {
		
		AdminPage adminPage = home.clickAdmin();
		try {
			Assert.assertTrue(adminPage.isPageOpen(),"Admin Page is Opened Assertion Failed");
			LOGGER.logTestStep("PASS", "Administration Menu displayed");
			UIUtils.waitUntilElementExists(driver, TestConfig.getInstance().getObjRep().getLocator("TestAdmin", "ImportDynamic"), 10);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("TestAdmin", "ImportDynamic"));
			driver.switchTo().defaultContent();
			int i=0;
			while(i<30)
			{
			           if(driver.findElement(TestConfig.getInstance().getObjRep().getLocator("Common", "Loader")).isDisplayed())
			           { 
			        	   i=i+1;
			                 System.out.println(i);
			           }
		               else
				             break;
		     }
			adminPage.takesScreenshot();
			i=0;
					while(i<5000)
					{
					           if(driver.findElement(TestConfig.getInstance().getObjRep().getLocator("Main", "Modalxpath")).isDisplayed()==false)
					           { 
					           i=i+1;
					           }
				               else
						             break;
				     }
			adminPage.takesScreenshot();
			driver.switchTo().defaultContent();
			driver.switchTo().frame(driver.findElement(By.xpath("//iframe[@id='did_dmode_frame_1']")));
			driver.switchTo().frame(driver.findElement(By.xpath("//frame[@name='mainframe']")));
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("ImportDynamic", "Data"));
			Thread.sleep(2000);
			adminPage.uploadFileRobot(reportPath);
			Thread.sleep(2000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Common", "btnOK"));
			Thread.sleep(15000);
			adminPage.mech_work_perf();
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("ImportDynamic", "Active"));
			Thread.sleep(2000);
			driver.switchTo().parentFrame();
			Thread.sleep(2000);
			driver.switchTo().frame(driver.findElement(By.xpath("//frame[@name='mech_header']")));
			Thread.sleep(2000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Assignee Profile", "Save"));
			Thread.sleep(15000);
			driver.switchTo().parentFrame();
			Thread.sleep(2000);
			driver.switchTo().frame(driver.findElement(By.xpath("//frame[@name='mech_navigate']")));
			Thread.sleep(2000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("ImportDynamic", "Fields"));
			Thread.sleep(5000);
			driver.switchTo().parentFrame();
			Thread.sleep(2000);
			driver.switchTo().frame(driver.findElement(By.xpath("//frame[@name='mech_header']")));
			Thread.sleep(2000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Testpolicy", "Close"));
			Thread.sleep(10000);
			driver.switchTo().defaultContent();
			WebElement did_appframe_Element=driver.findElement(By.id("did_appframe"));
			driver.switchTo().frame(did_appframe_Element);
			Thread.sleep(2000);
			WebElement cp_display=driver.findElement(By.xpath("//frame[@name='cp_display']"));
			driver.switchTo().frame(cp_display);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("Common", "menuReports"));
			driver.switchTo().defaultContent();
			i=0;
			while(i<20000)
			{
			if(driver.findElement(TestConfig.getInstance().getObjRep().getLocator("Common", "Loader")).isDisplayed())
			{
				i=i+1;
				
				
			}
			else
			{
				break;
			}
			}
			LOGGER.logTestStep("PASS", "Report Page is opened");
			adminPage.getWork_updated();
			wait.until(ExpectedConditions.numberOfElementsToBe(
					TestConfig.getInstance().getObjRep().getLocator("RunReports", "PlusSign"), 14));
			System.out.println("Test");		
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("ImportDynamic", "ClientSpecific"));
			Thread.sleep(2000);
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("ImportDynamic", "Import3M"));
			driver.switchTo().defaultContent();
			i=0;
			while(i<20000)
			{
			if(driver.findElement(TestConfig.getInstance().getObjRep().getLocator("Common", "Loader")).isDisplayed())
			{
				i=i+1;
				
				
			}
			else
			{
				break;
			}
			}
			adminPage.get_rpt_criteria_fields();
			UIUtils.selectValue(driver, TestConfig.getInstance().getObjRep().getLocator("RunReports", "DateRange"),
					"text", "This Calendar Quarter");
			UIUtils.selectValue(driver, TestConfig.getInstance().getObjRep().getLocator("RunReports", "DateType"),
					"text", "Date Received");
			driver.switchTo().parentFrame();
			driver.switchTo().frame("rpt_criteria_hdr");
			UIUtils.clickElement(driver, TestConfig.getInstance().getObjRep().getLocator("RunReports", "Preview"));
			LOGGER.logTestStep("PASS", "Preview Button is clicked");
			driver.switchTo().defaultContent();
			wait.until(ExpectedConditions.visibilityOf(UIUtils.findElement(driver,
					By.xpath("//div[@id='styled_popup_1']/div[@class='dmode_iframe_container']/iframe"))));
			driver.switchTo().frame(UIUtils.findElement(driver,
					By.xpath("//div[@id='styled_popup_1']/div[@class='dmode_iframe_container']/iframe")));
			UIUtils.dynamicWait(driver, By.xpath("//td[@id='did_counter']"), 5);
			
			
			
			
			
			
			
			
			
			
			
			
			
					
			
		} catch (Exception e) {
			// TODO: handle exception
			LOGGER.logError("Fail: " + e.getMessage());
			org.testng.Assert.fail("Fail: " + e.getMessage());
		}

	}
	@AfterMethod(alwaysRun = true)
	public void testResult(Method method, ITestResult result) throws Exception {
		switch (result.getStatus()) {
		case ITestResult.SUCCESS:
			LogMe.getExtentTest().log(LogStatus.PASS, "Test Case " + method.getName() + " is pass");
			break;
		case ITestResult.FAILURE:
			LogMe.getExtentTest().log(LogStatus.FAIL, "Test Case " + method.getName() + " failed");
			break;
		case ITestResult.SKIP:
			LogMe.getExtentTest().log(LogStatus.SKIP, "Test Case " + method.getName() + "  skiped");
			break;
		default:
			break;
		}
		
		  LOGGER.logEndTestCase(method.getName()); if
		  (
				  method.getName().contains("TC_04_Inactivate_User")
				  
		  ) {
			  driver.quit();
		  
		  } else { 
			  
			/*
			 * if (result.getStatus() == ITestResult.SUCCESS) { login =home.logout();
			 * login.isPageOpen(); }
			 * 
			 * driver.quit();
			 */
		  
		  }
		 

	}
	


	@AfterTest(alwaysRun = true)
	public void tearDown() throws Exception {

	}

	
}
