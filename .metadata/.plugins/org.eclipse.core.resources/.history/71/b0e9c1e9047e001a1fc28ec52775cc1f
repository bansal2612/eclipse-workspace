package com.birlasoft.automation.tests.regression;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.birlasoft.automation.driver.TestConfig;
import com.birlasoft.automation.driver.TestDriver;
import com.birlasoft.automation.uipages.ExpenseManagement;
import com.birlasoft.automation.uipages.HomePage;
import com.birlasoft.automation.uipages.LoginPage;
import com.birlasoft.framework.ExtentManager;
import com.birlasoft.framework.LogMe;
import com.birlasoft.utils.DataLoaders;
import com.birlasoft.utils.UIUtils;
import com.relevantcodes.extentreports.LogStatus;

public class TestsExpenseManagement extends BaseTest{
	static LogMe LOGGER;
	private WebDriver driver;
	LoginPage login;
	HomePage home;
	WebDriverWait wait;
	Random rand;

	@BeforeSuite(alwaysRun = true)
	public void suiteSetup() {

		try {
			LOGGER = new LogMe(TestsExpenseManagement.class);
			TestConfig.getInstance().suiteSetup();
		} catch (Exception e) {
			LOGGER.logError("Exception " + e.getClass().getName() + " caught from suite setup method", e);
		}

	}

	@BeforeTest
	public void testSetup() throws Exception {

	}

	@BeforeMethod(alwaysRun = true)
	public void startReporting(Method method) throws Exception {
		driver = TestDriver.driverInstantiation(TestConfig.getInstance().getBrowserName().toUpperCase());
		LogMe.getLogger().info("Base URL is " + TestConfig.getInstance().getAppBaseURL());

		LOGGER.logInfo("*********EXECUTION STARTED**********\n\n");

		driver.get(TestConfig.getInstance().getAppBaseURL());

		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
		driver.manage().timeouts().setScriptTimeout(30, TimeUnit.SECONDS);
		UIUtils.waitForPageLoad(driver);
		if (!TestConfig.getInstance().getDeviceResolution().equals("Full Screen")) {
			String[] dim = TestConfig.getInstance().getDeviceResolution().split(",");
			int dimX = Integer.parseInt(dim[0]);
			int dimY = Integer.parseInt(dim[1]);
			Dimension d = new Dimension(dimX, dimY);
			driver.manage().window().setSize(d);
		} else {
			driver.manage().window().maximize();
		}

		// Login into the application
		login = PageFactory.initElements(driver, LoginPage.class);

		// Validation whether login is displaying or not
		login.isPageOpen();

		// Trying to login into the application
		home = login.login(TestConfig.getDataConfig().getPropertyValue("userName"),
				TestConfig.getDataConfig().getPropertyValue("secret"));
		// wait=new WebDriverWait(driver, 80);
		rand = new Random();
		LOGGER.logBeginTestCase(method.getName());
		Assert.assertTrue(home.isPageOpen());
		LOGGER.logTestStep("PASS", "Home page is displaying");
	}

	// Expense TC

	@Test(description = " TC--Description--> EM View", priority = 1, enabled = true, groups = { "Regression",
			"Expense" }, alwaysRun = true)
	// enabled = true , false
	public void tc01EMView() throws Exception {
		// Click on Assignee Menu
		try {
			ExpenseManagement ExpenseManagement = PageFactory.initElements(driver, ExpenseManagement.class);
			ExpenseManagement.Quick_frame(driver);

			ExpenseManagement.clickelement_Quick();
			LOGGER.logTestStep("Pass", "Successfully clicked on Quick search", ExpenseManagement.takesScreenshot());
			ExpenseManagement.ServiceSelect(driver);
			ExpenseManagement.ExpenseReportDetails();
			LOGGER.logTestStep("Pass", "Successfully ExpenseReportDetails", ExpenseManagement.takesScreenshot());
			ExpenseManagement.ExpenseLine();
			LOGGER.logTestStep("Pass", "Successfully ExpenseLineDetails", ExpenseManagement.takesScreenshot());
			ExpenseManagement.Cancel();

		} catch (Exception e) {
			LOGGER.logError("Fail: " + e.getMessage());
			org.testng.Assert.fail("Fail: " + e.getMessage());
		}

	}

	@Test(description = " TC--Description--> EM New", priority = 2, enabled = true, groups = { "Regression",
			"Expense" }, alwaysRun = true)
	// enabled = true , false
	public void tc02EMNew() throws Exception {
		// Click on Assignee Menu
		try {
			ExpenseManagement ExpenseManagement = PageFactory.initElements(driver, ExpenseManagement.class);
			ExpenseManagement.Quick_frame(driver);

			ExpenseManagement.clickelement_Quick();
			LOGGER.logTestStep("Pass", "Successfully clicked on Quick search", ExpenseManagement.takesScreenshot());
			ExpenseManagement.ServiceSelect(driver);

			ExpenseManagement.ExpenseNew_details();
			LOGGER.logTestStep("Pass", "Successfully executed New expense report details",
					ExpenseManagement.takesScreenshot());
			ExpenseManagement.Expense_PO();
			LOGGER.logTestStep("Pass", "Successfully clicked on expense PO", ExpenseManagement.takesScreenshot());

		} catch (Exception e) {
			LOGGER.logError("Fail: " + e.getMessage());
			org.testng.Assert.fail("Fail: " + e.getMessage());
		}

	}

	@AfterTest
	public void tearDown() throws Exception {

	}

	@AfterMethod(alwaysRun = true)
	public void testResult(Method method, ITestResult result) throws Exception {
		switch (result.getStatus()) {
		case ITestResult.SUCCESS:
			LogMe.getExtentTest().log(LogStatus.PASS, "Test Case " + method.getName() + " is pass");
			break;
		case ITestResult.FAILURE:
			LogMe.getExtentTest().log(LogStatus.FAIL, "Test Case " + method.getName() + " failed");
			break;
		case ITestResult.SKIP:
			LogMe.getExtentTest().log(LogStatus.SKIP, "Test Case " + method.getName() + "  skiped");
			break;
		default:
			break;
		}

		LOGGER.logEndTestCase(method.getName());
		if (result.getStatus() == ITestResult.SUCCESS) {
			login = home.logout();
			login.isPageOpen();
		}
		driver.quit();
	}

	
	@DataProvider(name = "getClientData")
	public Object[][] getAssigneeData() throws IOException {
		String testDataPath = new File("Framework\\Test_Data\\TestData.xlsx").getCanonicalPath();
		return DataLoaders.excelDataLoader(testDataPath, "SearchClient");
	}
}