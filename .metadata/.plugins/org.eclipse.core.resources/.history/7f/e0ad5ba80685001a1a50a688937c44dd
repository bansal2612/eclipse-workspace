package com.birlasoft.utils;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.UUID;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.PageLoadStrategy;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.ie.InternetExplorerOptions;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.BrowserType;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;
import org.openqa.selenium.support.ui.WebDriverWait;

import org.sikuli.script.FindFailed;
import org.sikuli.script.Match;
import org.sikuli.script.Pattern;
import org.sikuli.script.Screen;

import com.birlasoft.automation.driver.TestConfig;

public class UIUtils {
	private static Logger LOGGER = Logger.getLogger(UIUtils.class);

	private static Config config;

	public static ExpectedCondition<Boolean> waitForPageLoad;

	private static final String JQUERY_ACTIVE_CONNECTIONS_QUERY = "return $.active == 0;";

	static {
		try {
			config = new Config("Framework\\Test_Config\\config.properties");
		} catch (IOException e) {
			LOGGER.error(e.getClass().getSimpleName(), e);
		}

		waitForPageLoad = new ExpectedCondition<Boolean>() {
			@Override
			public Boolean apply(WebDriver driver) {
				try {
					return executeScript(driver, "return document.readyState").equals("complete");
				} catch (Exception e) {
					return false;
				}
			}
		};
	}

	public static final ExpectedCondition<Boolean> EXPECT_DOC_READY_STATE = new ExpectedCondition<Boolean>() {
		String script = "if (typeof window != 'undefined') { return document.readyState;} else { return 'notready';}";

		@Override
		public Boolean apply(WebDriver driver) {
			try {
				String result = String.valueOf(executeScript(driver, script));
				return (result.equals("complete") || result.equals("interactive"));
			} catch (Exception e) {
				LOGGER.error(e.getClass().getSimpleName(), e);
				return false;
			}
		}
	};

	public static String generateRandomString(int length) {
		return RandomStringUtils.randomAlphabetic(length);
	}

	public static final ExpectedCondition<Boolean> EXPECT_NO_SPINNERS = new ExpectedCondition<Boolean>() {
		@Override
		public Boolean apply(WebDriver driver) {
			Boolean loaded = true;
			try {
				List<WebElement> spinners = driver.findElements(Constants.BYSPINNER);

				for (WebElement spinner : spinners) {
					if (spinner.isDisplayed()) {
						loaded = false;
						break;
					}
				}
			} catch (Exception e) {
				LOGGER.error(e.getClass().getSimpleName(), e);
				return false;
			}
			return loaded;
		}
	};

	public static Config getConfig() {
		return config;
	}

	public static void enterText(WebDriver driver, String text) {
		Actions action = new Actions(driver);
		action.sendKeys(text).build().perform();
		try {
			Thread.sleep(5*1000);
			action.sendKeys(Keys.TAB).build().perform();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public static void enterTab(WebDriver driver) {
		Actions action = new Actions(driver);
		action.sendKeys(Keys.TAB).build().perform();
	}

	// Is alert method for specific to SE
	public static boolean isAlertPresentSE(WebDriver driver) {
		boolean result = false;

		try {
			driver.switchTo().alert();
			return true;

		} catch (NoAlertPresentException e) {
			LOGGER.error(e.getClass().getSimpleName(), e);
			return false;
		}

		
	}

	private static DesiredCapabilities getBrowserCapabilities(String browserType, String driverPath) throws Exception {
		DesiredCapabilities dc = null;

		switch (browserType.toUpperCase()) {
		case "FIREFOX":
			if (StringUtils.isNotBlank(driverPath)) {
				System.setProperty("webdriver.gecko.driver", driverPath);
			} else {
				System.setProperty("webdriver.gecko.driver", config.getPropertyValue("GeckoDriverPath"));
			}
			dc = DesiredCapabilities.firefox();
			dc.setBrowserName(BrowserType.FIREFOX);
			break;
		case "CHROME":
			if (StringUtils.isNotBlank(driverPath)) {
				System.setProperty("webdriver.chrome.driver", driverPath);
			} else {
				System.setProperty("webdriver.chrome.driver", config.getPropertyValue("ChromeDriverPath"));
			}
			dc = DesiredCapabilities.chrome();
			ChromeOptions options = new ChromeOptions();
			options.addArguments("test-type");
			dc.setBrowserName(BrowserType.CHROME);
			dc.setCapability(ChromeOptions.CAPABILITY, options);
			break;
		case "IE":
			if (StringUtils.isNotBlank(driverPath)) {
				System.setProperty("webdriver.ie.driver", driverPath);
			} else {
				System.setProperty("webdriver.ie.driver", config.getPropertyValue("InternetExplorerDriverPath"));
			}
			dc = DesiredCapabilities.internetExplorer();
			dc.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, true);
			dc.setCapability(InternetExplorerDriver.IGNORE_ZOOM_SETTING, true);
			dc.setCapability(InternetExplorerDriver.IE_ENSURE_CLEAN_SESSION, true);
			dc.setCapability("ignoreProtectedModeSettings", true);
			dc.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);
			dc.setBrowserName(BrowserType.IE);
			break;
		default:
			break;
		}
		return dc;
	}

	public static WebDriver createDriverInstance(String browserType, String driverPath) throws Exception {
		WebDriver driver = null;

		switch (browserType) {
		case "FIREFOX":
			if (StringUtils.isNotBlank(driverPath)) {
				System.setProperty("webdriver.gecko.driver", driverPath);
			} else {
				System.setProperty("webdriver.gecko.driver", config.getPropertyValue("GeckoDriverPath"));
			}
			driver = new FirefoxDriver();
			break;
		case "CHROME":
			if (StringUtils.isNotBlank(driverPath)) {
				System.setProperty("webdriver.chrome.driver", driverPath);
			} else {
				System.setProperty("webdriver.chrome.driver", config.getPropertyValue("ChromeDriverPath"));

			}
			driver = new ChromeDriver();
			break;
		case "IE":
			DesiredCapabilities dc = getBrowserCapabilities(browserType, driverPath);
			InternetExplorerOptions ieOptions = new InternetExplorerOptions(dc);
			driver = new InternetExplorerDriver(ieOptions);
			break;
		default:
			break;
		}

		driver.manage().timeouts().setScriptTimeout(Long.parseLong(config.getPropertyValue("ScriptTimeoutSeconds")),
				TimeUnit.SECONDS);
		driver.manage().timeouts().pageLoadTimeout(Long.parseLong(config.getPropertyValue("AVGWAITTIME")),
				TimeUnit.SECONDS);
		driver.manage().timeouts().implicitlyWait(Long.parseLong(config.getPropertyValue("AVGWAITTIME")),
				TimeUnit.SECONDS);
		return driver;
	}

	public static WebDriver createDriverInstance(String browserType, String driverPath, String gridURL)
			throws Exception {

		WebDriver driver = new RemoteWebDriver(new URL(gridURL), getBrowserCapabilities(browserType, driverPath));
		driver.manage().timeouts().setScriptTimeout(Long.parseLong(config.getPropertyValue("ScriptTimeoutSeconds")),
				TimeUnit.SECONDS);
		driver.manage().timeouts().pageLoadTimeout(Long.parseLong(config.getPropertyValue("AVGWAITTIME")),
				TimeUnit.SECONDS);
		driver.manage().timeouts().implicitlyWait(Long.parseLong(config.getPropertyValue("AVGWAITTIME")),
				TimeUnit.SECONDS);
		return driver;
	}

	public static Object executeScript(WebDriver driver, String script, Object... args) {
		return ((JavascriptExecutor) (driver)).executeScript(script, args);
	}

	public static Object executeAsyncScript(WebDriver driver, String script, Object... args) {
		return ((JavascriptExecutor) (driver)).executeAsyncScript(script, args);
	}

	public static boolean isObjectExist(WebDriver driver, By by) {
		return (driver.findElements(by).size() > 0);
	}

	public static By getLocatorObject(String locatorType, String locatorValue) {
		By by = null;

		switch (locatorType.toUpperCase()) {
		case "XPATH":
			by = By.xpath(locatorValue);
			break;
		case "ID":
			by = By.id(locatorValue);
			break;
		case "NAME":
			by = By.name(locatorValue);
			break;
		case "TAGNAME":
		case "TAG":
			by = By.tagName(locatorValue);
			break;
		case "CLASSNAME":
		case "CLASS":
			by = By.className(locatorValue);
			break;
		case "CSSSELECTOR":
		case "CSS":
			by = By.cssSelector(locatorValue);
			break;
		case "LINKTEXT":
		case "LINK":
			by = By.linkText(locatorValue);
			break;
		case "PARTIALLINKTEXT":
			by = By.partialLinkText(locatorValue);
			break;
		default:
			break;
		}

		return by;
	}

	public static By getLocatorObject(String locator) {
		return getLocatorObject(locator.split(config.getPropertyValue("LocatorValueSeparator"))[0],
				locator.split(config.getPropertyValue("LocatorValueSeparator"))[1]);
	}

	public static WebElement findElement(WebDriver driver, By by) throws Exception {
		return findElement(driver, by, Integer.valueOf(config.getPropertyValue("AVGWAITTIME")));
	}

	public static WebElement findElement(WebDriver driver, By by, int waitTime) {
		WebDriverWait wWait = new WebDriverWait(driver, waitTime);
		return wWait.until(ExpectedConditions.visibilityOfElementLocated(by));
	}

	public static WebElement findElements(WebDriver driver, By by) {
		List<WebElement> webElements = driver.findElements(by);
		for (WebElement webElement : webElements) {
			if (webElement.isDisplayed()) {
				return webElement;
			}
		}
		return null;
	}

	public static void highLightElement(WebDriver driver, WebElement element) {
		executeScript(driver, "arguments[0].setAttribute('style', 'border: 2px solid blue;');", element);

		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
		}

		executeScript(driver, "arguments[0].setAttribute('style', 'border: 3px solid blue;');", element);
	}

	public static void highLightElement(WebDriver driver, By by) {
		WebElement element = driver.findElement(by);
		executeScript(driver, "arguments[0].setAttribute('style', 'border: 2px solid blue;');", element);

		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
		}

		executeScript(driver, "arguments[0].setAttribute('style', 'border: 3px solid blue;');", element);
	}

	public static List<WebElement> retrieveChildElements(WebDriver driver, By by) {
		WebElement element = driver.findElement(by);
		List<WebElement> childs = element.findElements(By.xpath(".//*"));
		return childs;
	}

	public static void hoverElement(WebDriver driver, WebElement element) {
		Actions action = new Actions(driver);
		// action.moveToElement(element).build().perform();
		action.moveToElement(element).perform();
	}

	public static boolean isAlertPresent(WebDriver driver) {
		boolean result = false;

		try {
			driver.switchTo().alert();
			result = true;
			driver.switchTo().defaultContent();

		} catch (NoAlertPresentException e) {
			LOGGER.error(e.getClass().getSimpleName(), e);
		}

		return result;
	}

	public static Alert getAlert(WebDriver driver) {
		return getAlert(driver, Integer.valueOf(config.getPropertyValue("AVGWAITTIME")));
	}

	public static void handleAlert() {
		try {
			Robot robot = new Robot();

			robot.keyPress(KeyEvent.VK_TAB);
			Thread.sleep(200);
			robot.keyRelease(KeyEvent.VK_TAB);
			Thread.sleep(200);

			robot.keyPress(KeyEvent.VK_TAB);
			Thread.sleep(200);
			robot.keyRelease(KeyEvent.VK_TAB);
			Thread.sleep(200);

			robot.keyPress(KeyEvent.VK_ENTER);
			Thread.sleep(200);
			robot.keyRelease(KeyEvent.VK_ENTER);

			Thread.sleep(5000);
		} catch (Exception e) {
			LOGGER.error(e.getClass().getSimpleName(), e);
		}
	}

	public static Alert getAlert(WebDriver driver, int waitTime) {
		return new WebDriverWait(driver, waitTime).until(ExpectedConditions.alertIsPresent());
	}

	public static void alertAccept(WebDriver driver) throws Exception {
		getAlert(driver).accept();
		driver.switchTo().defaultContent();
	}

	public static void alertDismiss(WebDriver driver) throws Exception {
		getAlert(driver).dismiss();
		driver.switchTo().defaultContent();
	}

	public static void alertAccept(WebDriver driver, int waitTime) {
		getAlert(driver, waitTime).accept();
		driver.switchTo().defaultContent();
	}

	public static void alertDismiss(WebDriver driver, int waitTime) {
		getAlert(driver, waitTime).dismiss();
		driver.switchTo().defaultContent();
	}

	public static String getToolTip(WebDriver driver, String screenName, String element) throws Exception {
		WebElement webElement = UIUtils.findElement(driver,
				TestConfig.getInstance().getObjRep().getLocator(screenName, element));
		// UIUtils.hoverElement(driver, webElement);
		return webElement.getAttribute("Title");

	}

	public static void takeScreenshot(WebDriver driver, String filePath) throws IOException {
		File file = new File(filePath);

		if (!file.getParentFile().exists())
			file.getParentFile().mkdirs();
		FileUtils.copyFile(((TakesScreenshot) (driver)).getScreenshotAs(OutputType.FILE), file);
	}

	public static void takeScreenshot(WebDriver driver, WebElement element, String filePath) throws IOException {
		UIUtils.scrollIntoView(driver, element);

		File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
		File file = new File(filePath);

		if (!file.getParentFile().exists())
			file.getParentFile().mkdirs();
		FileUtils.copyFile(screenshot, file);
	}

	public static void closeAllPopUps(WebDriver driver) {
		String mainWinHanlde = driver.getWindowHandle();

		// Closing all but the main window
		for (String winHandle : driver.getWindowHandles()) {
			driver.switchTo().window(winHandle);
			if (!winHandle.equalsIgnoreCase(mainWinHanlde)) {
				driver.close();
			}
		}

		// Focusing back to main Window
		driver.switchTo().window(mainWinHanlde);
	}

	public static void selectValue(WebDriver driver, By by, String optionText) {
		optionText = optionText.trim();

		if (optionText.toLowerCase().startsWith("index=")) {
			selectValue(driver, by, "index", optionText.replaceAll("index=", ""));
		} else if (optionText.toLowerCase().startsWith("text=")) {
			selectValue(driver, by, "text", optionText.replaceAll("text=", ""));
		} else if (optionText.toLowerCase().startsWith("containstext=")) {
			selectValue(driver, by, "containstext", optionText.replaceAll("containstext=", ""));
		} else if (optionText.startsWith("value=")) {
			selectValue(driver, by, "value", optionText.replaceAll("value=", ""));
		} else {
			new Select(driver.findElement(by)).selectByVisibleText(optionText);
		}
	}

	public static void selectValue(WebDriver driver, By by, String selectBy, String option) {
		Select select = new Select(driver.findElement(by));
		switch (selectBy.toLowerCase()) {
		case "index":
			select.selectByIndex(Integer.valueOf(option));
			break;
		case "text":
			select.selectByVisibleText(option);
			break;
		case "value":
			select.selectByValue(option);
			break;
		case "containstext":
			int indexNum = 1;
			for (WebElement element : select.getOptions()) {
				if (element.getText().toLowerCase().contains(option.toLowerCase())) {
					select.selectByIndex(indexNum);
					break;
				}
				indexNum++;
			}
			break;
		default:
			break;
		}
	}

	// Method to return current date and time
	/*
	 * public static String getCurrentDate(String format) { DateFormat
	 * dateFormat=new SimpleDateFormat(format); Date date=new Date(); return
	 * dateFormat.format(date); }
	 */

	public static void verticalScrollWindow(WebDriver driver, String direction) {
		if (direction.equalsIgnoreCase("Up")) {
			executeScript(driver, "scroll(250, 0)");
		} else {
			executeScript(driver, "scroll(0, 250)");
		}
	}

	public static void scrollIntoView(WebDriver driver, WebElement element) {
		executeScript(driver, "arguments[0].scrollIntoView(true);", element);
	}

	public static void scrollIntoView(WebDriver driver, By by) {
		WebElement element = driver.findElement(by);
		executeScript(driver, "arguments[0].scrollIntoView(true);", element);
	}

	public static void scrollIntoView(WebDriver driver, Integer height) throws InterruptedException {
		JavascriptExecutor js = ((JavascriptExecutor) driver);
		if (null == height) {
			js.executeScript("window.scrollTo(0, document.body.scrollHeight)");
		} else {
			js.executeScript("window.scrollTo(0, " + height + ")");
		}
		Thread.sleep(5000);
	}

	public static FluentWait<WebDriver> getFluentWait(WebDriver driver, Integer... waitTimes) {
		if (waitTimes != null) {
		} else {
		}

		if (waitTimes.length > 1) {
		} else {
		}

		return new FluentWait<>(driver).ignoring(NoSuchElementException.class)
				.ignoring(StaleElementReferenceException.class);
	}

	public static boolean waitForPageLoad(WebDriver driver, int waitTime) {
		return new WebDriverWait(driver, waitTime).until(waitForPageLoad);
	}

	public static boolean waitForPageLoad(WebDriver driver) throws Exception {
		return waitForPageLoad(driver, Integer.valueOf(config.getPropertyValue("AVGWAITTIME")));
	}

	@SafeVarargs
	public static boolean waitForPageLoad(WebDriver driver, int waitTime, ExpectedCondition<Boolean>... conditions) {
		boolean isLoaded = false;

		try {
			waitUntilAjaxRequestCompletes(driver);
			Wait<WebDriver> wWait = getFluentWait(driver);

			for (ExpectedCondition<Boolean> condition : conditions) {
				isLoaded = wWait.until(condition);
				if (!isLoaded) {
					// Stop checking on first condition returning false
					break;
				}
			}
		} catch (Exception e) {
			LOGGER.error(e.getClass().getSimpleName(), e);
		}
		return isLoaded;
	}

	public static WebElement waitUntilElementExists(WebDriver driver, final By by, Integer... waitTimes) {
		final Wait<WebDriver> wWait = getFluentWait(driver, waitTimes);
		WebElement element = null;
		try {
			wWait.until(new ExpectedCondition<WebElement>() {
				@Override
				public WebElement apply(WebDriver driver) {
					return driver.findElement(by);
				}
			});
			element = wWait.until(ExpectedConditions.visibilityOfElementLocated(by));
		} catch (Exception e) {
			LOGGER.error(e.getClass().getSimpleName(), e);
		}
		return element;
	}

	public static boolean waitUntilElementNotExists(WebDriver driver, By by, Integer... waitTimes) {
		boolean result = false;
		try {
			result = getFluentWait(driver, waitTimes).until(
					ExpectedConditions.or(ExpectedConditions.not(ExpectedConditions.presenceOfElementLocated(by)),
							ExpectedConditions.invisibilityOfElementLocated(by)));
		} catch (Exception e) {
			LOGGER.error(e.getClass().getSimpleName(), e);
		}
		return result;
	}

	private static void waitUntilAjaxRequestCompletes(WebDriver driver, Integer... waitTimes) {
		final Wait<WebDriver> wWait = getFluentWait(driver, waitTimes);

		wWait.until(new ExpectedCondition<Boolean>() {
			@Override
			public Boolean apply(WebDriver driver) {
				return (Boolean) executeScript(driver, JQUERY_ACTIVE_CONNECTIONS_QUERY);
			}
		});
	}

	public static boolean dynamicWait(WebDriver driver, By by, int waitTime) {
		for (int i = 1; i < waitTime; i++) {
			try {
				return driver.findElement(by).isDisplayed() == true;
			} catch (Exception e) {
			}
		}
		return false;
	}

	public static void clickElement(WebDriver driver, By by) throws Exception {
		WebElement element = findElement(driver, by);
		new Actions(driver).moveToElement(element).click().build().perform();
	}

	public static void clickEnter(WebDriver driver, By by) throws Exception {
		WebElement element = findElement(driver, by);
		new Actions(driver).moveToElement(element).build().perform();
		element.sendKeys(Keys.ENTER);
	}

	public static void clickElementJScript(WebDriver driver, By by) throws Exception {
		WebElement element = null;
		element = findElement(driver, by);
		clickElementJScript(driver, element);
	}

	public static void clickElementJScript(WebDriver driver, WebElement element) {
		executeScript(driver, "arguments[0].scrollIntoView(true);", element);
		executeScript(driver, "arguments[0].click();", element);
	}

	public static void inputValue(WebElement element, String data) {
		element.clear();

		try {
			Thread.sleep(500);
		} catch (InterruptedException e) {
		}

		for (char chr : data.toCharArray()) {
			element.sendKeys(new StringBuilder(chr));
		}
	}

	public static void inputText(WebElement element, String data) {
		element.clear();

		try {
			Thread.sleep(500);
		} catch (InterruptedException e) {
		}

		element.sendKeys(data);
	}

	public static void inputText(WebDriver driver, By by, String data) {
		WebElement element;
		try {
			element = findElement(driver, by);
			element.clear();
			Thread.sleep(500);
			element.sendKeys(data);
		} catch (Exception e1) {
			e1.printStackTrace();
		}
	}

	public static void inputTextJScript(WebDriver driver, WebElement element, String data) {
		element.clear();

		try {
			Thread.sleep(500);
		} catch (InterruptedException e) {
		}

		executeScript(driver, "arguments[0].scrollIntoView(true);", element);
		executeScript(driver, "arguments[0].setAttribute('value', '" + data + "');", element);
	}

	public static String getText(WebElement element) {
		String text = element.getText();

		if (StringUtils.isBlank(text)) {
			text = element.getAttribute("value");
		}

		return text;
	}

	public static String getChildText(WebElement element) {
		String elementText = getText(element);
		StringBuilder sb;

		if (StringUtils.isNotBlank(elementText)) {
			sb = new StringBuilder(elementText);
		} else {
			sb = new StringBuilder();
		}

		List<WebElement> childrens = element.findElements(By.xpath(".//*"));
		for (WebElement child : childrens) {
			try {
				if (child.isDisplayed() && StringUtils.isNotBlank(child.getText())
						&& !(elementText.equalsIgnoreCase(child.getText()))) {
					sb.append(child.getText());
				}
			} catch (Exception e) {
			}
		}
		return sb.toString();
	}

	public static void moveTo(WebDriver driver, By by) throws Exception {
		WebElement element = findElement(driver, by);
		new Actions(driver).moveToElement(element).build().perform();
	}

	public static void moveAndClick(WebDriver driver, List<By> byList) throws Exception {
		Actions actions = new Actions(driver);
		WebElement element;

		for (int i = 0; i < byList.size() - 1; i++) {
			element = findElement(driver, byList.get(i));
			actions.moveToElement(element).perform();
			Thread.sleep(3000);
		}

		element = findElement(driver, byList.get(byList.size() - 1));
		actions.moveToElement(element).click().build().perform();
	}

	public static String generateAbsoluteXPath(WebElement childElement, String current) {
		String childTag = childElement.getTagName();

		if ("html".equals(childTag)) {
			return "/html" + current;
		}

		WebElement parentElement = childElement.findElement(By.xpath(".."));
		List<WebElement> childElements = parentElement.findElements(By.xpath("*"));

		int count = 0;

		for (WebElement webElement : childElements) {
			if (webElement.getTagName().equals(childTag)) {
				count++;
			}

			if (childElement.equals(webElement)) {
				return generateAbsoluteXPath(parentElement, "/" + childTag + "[" + count + "]" + current);
			}
		}
		return null;
	}

	public static WebElement getGridParentRowElement(WebElement element) {
		WebElement parentRow = null;
		int rowCounter = 0;

		if (element != null) {
			parentRow = element;

			do {
				parentRow = parentRow.findElement(By.xpath(".."));
				rowCounter++;
			} while (parentRow.getTagName().toLowerCase().compareTo("tr") != 0 && rowCounter < 10);

			if (rowCounter >= 10) {
				return null;
			}
		}
		return parentRow;
	}

	public static Map<Integer, List<WebElement>> getGridCells(WebDriver driver, String tableXPath) throws Exception {
		Map<Integer, List<WebElement>> gridElements = new HashMap<Integer, List<WebElement>>();
		String rowsXPath = tableXPath + "//tbody/tr";
		List<WebElement> rowElements = driver.findElements(By.xpath(rowsXPath));

		int rowIndex = 1;
		for (WebElement rowElement : rowElements) {
			List<WebElement> gridCells = rowElement.findElements(By.xpath(".//td"));

			gridElements.put(rowIndex, gridCells);
			rowIndex++;
		}

		return gridElements;
	}

	public static Map<Integer, List<String>> getGridCellValues(WebDriver driver, String tableXPath) throws Exception {
		Map<Integer, List<String>> values = new HashMap<Integer, List<String>>();
		Map<Integer, List<WebElement>> gridElements = getGridCells(driver, tableXPath);

		for (int rowIndex = 1; rowIndex <= gridElements.size(); rowIndex++) {
			List<WebElement> gridCells = gridElements.get(rowIndex);
			List<String> rowValues = new ArrayList<String>();

			for (WebElement gridCell : gridCells) {
				rowValues.add(UIUtils.getChildText(gridCell));
			}

			values.put(rowIndex, rowValues);
		}
		return values;
	}

	public static List<WebElement> getGridRowElements(WebDriver driver, String tableXPath, String itemValue)
			throws Exception {
		String rowXPath = tableXPath + "//*[text()='" + itemValue + "']//ancestor::tr[1]";
		WebElement rowElement = UIUtils.findElement(driver, By.xpath(rowXPath));

		return rowElement.findElements(By.xpath(".//td"));
	}

	public static List<String> getGridRowValues(WebDriver driver, String tableXPath, String itemValue)
			throws Exception {
		List<WebElement> gridRowElements = getGridRowElements(driver, tableXPath, itemValue);
		List<String> rowValues = new ArrayList<String>();

		for (WebElement gridCell : gridRowElements) {
			rowValues.add(UIUtils.getChildText(gridCell));
		}

		return rowValues;
	}

	public static int getGridColNumber(WebDriver driver, String tableXPath, String tableHeader) {
		String colXPath = tableXPath + "//th";
		List<WebElement> colHeaders = driver.findElements(By.xpath(colXPath));
		int colNum = 1;

		for (WebElement colHeader : colHeaders) {
			WebElement title;

			try {
				title = colHeader.findElement(By.xpath(".//*[text() = '" + tableHeader + "']"));
				if (title.isDisplayed()) {
					return colNum;
				}
			} catch (Exception e) {
			}
			colNum++;
		}

		return -1;
	}

	public static String getGridColValueForItem(WebDriver driver, String tableXPath, String itemValue, int colNum)
			throws Exception {
		String rowXPath = tableXPath + "//*[text()='" + itemValue + "']//ancestor::tr[1]";
		WebElement rowElement = UIUtils.findElement(driver, By.xpath(rowXPath));
		String colValue = getChildText(rowElement.findElement(By.xpath(".//td[" + colNum + "]")));
		return colValue;
	}

	public static Map<String, List<WebElement>> getGridCellsColWise(WebDriver driver, String tableXPath)
			throws Exception {
		Map<String, List<WebElement>> gridElements = new HashMap<String, List<WebElement>>();

		String colXPath = tableXPath + "//th";
		List<WebElement> colElements = driver.findElements(By.xpath(colXPath));

		int colNum = 1;

		for (WebElement colHeader : colElements) {
			String rowXPath = tableXPath + "//tbody/tr[" + colNum + "]";
			List<WebElement> gridCells = driver.findElement(By.xpath(rowXPath)).findElements(By.xpath(".//td"));

			gridElements.put(getChildText(colHeader), gridCells);
		}
		return gridElements;
	}

	public static Map<String, List<String>> getGridCellValuesColWise(WebDriver driver, String tableXPath)
			throws Exception {
		Map<String, List<WebElement>> gridElements = getGridCellsColWise(driver, tableXPath);
		Map<String, List<String>> gridCellValues = new HashMap<String, List<String>>();

		Set<String> headers = gridElements.keySet();

		for (String header : headers) {
			List<WebElement> colElements = gridElements.get(header);
			List<String> colValues = new ArrayList<String>();

			for (WebElement cell : colElements) {
				colValues.add(getChildText(cell));
			}
			gridCellValues.put(header, colValues);
		}

		return gridCellValues;
	}

	public static void fileUpload(String filePath) throws AWTException, InterruptedException {
		StringSelection selection = new StringSelection(filePath);
		Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
		clipboard.setContents(selection, selection);

		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_V);
		robot.keyRelease(KeyEvent.VK_V);

		Thread.sleep(6000);

		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_ENTER);
	}

	public static void switchToWindow(WebDriver driver, int index) {
		int i = 0;
		for (String handle : driver.getWindowHandles()) {
			if (i == index) {
				driver.switchTo().window(handle);
				break;
			}
			i++;
		}
	}

	// Method to load the opening of frame
	public static void waitForFrametoLoad(WebDriver driver, By by, String Attributevalue, int timeoutValue) {
		WebDriverWait wait = new WebDriverWait(driver, timeoutValue);
		wait.until(new ExpectedCondition<Boolean>() {

			@Override
			public Boolean apply(WebDriver driver) {
				// TODO Auto-generated method stub
				try {
					WebElement element = findElement(driver, by);
					String style = element.getAttribute("style");
					System.out.println(style);
					if (style.contains(Attributevalue)) {
						return true;
					} else
						return false;
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return true;
			}
		});

	}

	// Method to verify whether the specific text is present in dropdown for QE
	public static boolean checkTextInDropdown(WebElement element, String textTocheck) {
		Select select = new Select(element);
		try {
			select.selectByVisibleText(textTocheck);
			return true;
		} catch (Exception e) {
			// TODO: handle exception
			return false;
		}
	}

	public static String getCurrentDate(String format) {

		DateFormat dateFormat = new SimpleDateFormat(format);
		Date date = new Date();
		return dateFormat.format(date);
	}

	public static Screen getScreenObject() {
		Screen screen = new Screen();
		return screen;
	}

	public static Pattern getPatternObject() {
		Pattern p = new Pattern();
		return p;
	}

	public static void findAndClick(Screen s, Pattern fileInputTextBox, Pattern openButton, String filetoupload)
			throws FindFailed {
		s.wait(fileInputTextBox, 20);
		if (s.exists(fileInputTextBox, 10) != null) {
			System.out.println("File Name Pattern exist..");
			Match match = s.getLastMatch();
			match.find(fileInputTextBox);
			match.click(fileInputTextBox);

			match.type(fileInputTextBox, filetoupload);

			match.setAutoWaitTimeout(50);

		}

		else

		{

			System.out.println("File Name pattern not found on screen..");

		}

		if (s.exists(openButton, 5) != null)

		{

			System.out.println("Open Button pattern exist..");

			Match match = s.getLastMatch();

			match.find(openButton);

			match.click(openButton);

			match.setAutoWaitTimeout(30);

		}

		else

		{

			System.out.println("Open buton pattern not found on screen..");

		}

	}

	// Method to set ChromeOptions

	public static void setChromeoptions(WebDriver driver)

	{

		File folder = new File(UUID.randomUUID().toString());
		folder.mkdir();

		ChromeOptions options = new ChromeOptions();

		Map<String, Object> prefs = new HashMap<String, Object>();

		prefs.put("profile.default_content_settings.popups", 0);

		prefs.put("download.default_directory", folder.getAbsolutePath());

		options.setExperimentalOption("prefs", prefs);

		DesiredCapabilities cap = DesiredCapabilities.chrome();

		cap.setCapability(ChromeOptions.CAPABILITY, options);

	}

//Method to find is Element:Ankit March 3,2020
	public static boolean isElementPresent(WebDriver driver, By locatorKey) {
		try {
			driver.findElement(locatorKey);
			return true;
		} catch (org.openqa.selenium.NoSuchElementException e) {
			return false;
		}
	}

	// Method to load the opening of frame
	public static void waitForFrametoLoad(WebDriver driver, By by, String Attributename, String Attributevalue,
			int timeoutValue) {
		WebDriverWait wait = new WebDriverWait(driver, timeoutValue);
		wait.until(new ExpectedCondition<Boolean>() {

			@Override
			public Boolean apply(WebDriver driver) {
				// TODO Auto-generated method stub
				try {
					WebElement element = findElement(driver, by);
					String attributeName = element.getAttribute(Attributename);
					System.out.println(attributeName);
					if (attributeName.contains(Attributevalue)) {
						return true;
					} else
						return false;
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return true;
			}
		});

	}

	// Method to check all the checkbox:Ankit March 11,2020
	public static void clickAllCheckbox(List<WebElement> allElements) {
		Iterator<WebElement> it = allElements.iterator();
		while (it.hasNext()) {
			WebElement element = it.next();
			if (element.isSelected() == false) {
				element.click();
			}

		}
	}

	public static void fungetFileDownloadTime(WebDriver driver, String fValue)
			throws InterruptedException, java.text.ParseException {
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		Calendar cal = Calendar.getInstance();
		String dateStart = dateFormat.format(cal.getTime());
		File file = new File(fValue);

		while (!file.exists()) {
			new FluentWait<WebDriver>(driver).withTimeout(600, TimeUnit.SECONDS)
					.pollingEvery(600, TimeUnit.MILLISECONDS).ignoring(NoSuchElementException.class);
		}
		System.out.println("TestInfo : File Downloaded Successfully");
		String dateStop = dateFormat.format(file.lastModified());
		Date d1 = null;
		Date d2 = null;
		try {
			d1 = dateFormat.parse(dateStart);
			d2 = dateFormat.parse(dateStop);
		} catch (Exception e) {
			e.printStackTrace();
		}
		long diff = d2.getTime() - d1.getTime();
		long diffSeconds = diff / 1000 % 60;
		long diffMinutes = diff / (60 * 1000) % 60;
		long diffHours = diff / (60 * 60 * 1000);
		System.out.println("Time in seconds: " + diffSeconds + " seconds.");
		System.out.println("Time in minutes: " + diffMinutes + " minutes.");
		System.out.println("Time in hours: " + diffHours + " hours.");

		System.out.println(diffHours + ":" + diffMinutes + ":" + diffSeconds);

	}

	// Method to verify the latest downloaded file.
	public static boolean verifyDownloadedFile(String downloadPath, String filename) {
		boolean flag = false;
		File fileConnect = new File(downloadPath);
		File[] totalFiles = fileConnect.listFiles();
		for (File file2 : totalFiles) {
			if (file2.getName().contains(filename)) {
				flag = true;
				file2.delete();
			} else {
				continue;
			}
		}
		return flag;
	}

	public static void clickBackSpace(WebDriver driver, By by) throws Exception {
		WebElement element = findElement(driver, by);
		new Actions(driver).moveToElement(element).build().perform();
		element.sendKeys(Keys.BACK_SPACE);
	}

	public static String getCurrentDate() {
		Calendar calendar = Calendar.getInstance();
		return Math.addExact(calendar.getTime().getMonth(), 1) + "/" + calendar.get(Calendar.DATE) + "/"
				+ Math.addExact(calendar.getTime().getYear(), 1900);
	}

	public static String getTodayDate() {
		Calendar calendar = Calendar.getInstance();
		return calendar.get(Calendar.DATE) + "";
	}

	public static String getMonthEndDate() {
		Calendar calendar = Calendar.getInstance();
		return Math.addExact(calendar.getTime().getMonth(), 1) + "/" + calendar.getActualMaximum(Calendar.DATE) + "/"
				+ Math.addExact(calendar.getTime().getYear(), 1900);
	}

	public static String getText(WebDriver driver, By by) {
		WebElement element = driver.findElement(by);
		String text = element.getText();
		if (StringUtils.isBlank(text)) {
			text = element.getAttribute("value");
		}
		return text;
	}

	public static void scrollIntoViewHeight(WebDriver driver, Integer height) throws InterruptedException {
		JavascriptExecutor js = ((JavascriptExecutor) driver);
		if (null == height) {
			js.executeScript("window.scrollTo(0, document.body.scrollHeight)");
		} else {
			js.executeScript("window.scrollTo(0, " + height + ")");
		}
		Thread.sleep(5000);
	}

	public static void downArrowKey(WebDriver driver, int count) {
		Actions action = new Actions(driver);
		for (int i = 0; i < count; i++) {
			action.sendKeys(Keys.ARROW_DOWN).build().perform();
		}
	}

	public static void clearAndEnterText(WebDriver driver, String text) {
		Actions action = new Actions(driver);

        action.sendKeys(text).build().perform();

        try {

                        Thread.sleep(5*1000);

                        action.sendKeys(Keys.TAB).build().perform();

        } catch (InterruptedException e) {

                        e.printStackTrace();

        }
	}

	public static void clearDate(WebDriver driver, String text) {
		Actions action = new Actions(driver);
		action.doubleClick().perform();
		for (int i = 0; i < 10; i++) {
			action.sendKeys(Keys.BACK_SPACE).build().perform();
		}
		action.sendKeys(text).build().perform();
		action.sendKeys(Keys.TAB).build().perform();
	}

	public static String getElementInnerText(WebDriver driver, By by) {
		return driver.findElement(by).getText();
	}
	//ME
	public static boolean isAttribtuePresent(WebElement element, String attribute) {
	    Boolean result = false;
	    try {
	        String value = element.getAttribute(attribute);
	        if (value != null){
	            result = true;
	        }
	    } catch (Exception e) {}

	    return result;
	}
	public static String getNextDate(int day) {

        DateFormat dateFormat = new SimpleDateFormat("MM/DD/YYYY");

Date currentDate = new Date();

        LocalDateTime localDateTime = currentDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();

        localDateTime = localDateTime.plusDays(day);

        Date currentDatePlusOneDay = Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());

        return dateFormat.format(currentDatePlusOneDay);

}
	public static void clickEnterOnly() throws AWTException  {
		
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
	}
	


}
